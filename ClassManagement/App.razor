@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.Timers;
@using Dapper;
@using Microsoft.Data.Sqlite;
@using ClassManagement.Data;
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject ProtectedLocalStorage localStorage
@inject SessionService session

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudText Style="margin-top:1ch;" Align="Align.Center" Typo="Typo.h5">@WarningMessage &#128529;</MudText>
            </MudContainer>
        </LayoutView>
    </NotFound>
</Router>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    HashSet<ClassSchedule> NotifiedSchedules = new();
    Timer notificationTimer = new(30000);
    IJSObjectReference module;
    string WarningMessage => GetWarningMessage();
    static readonly string[] NotFoundMessages =
    {
        "Exploring new things is good, but new urls isn't, please go back",
        "You are trespassing User no baka",
        "Are you trying to find something mysterious? Well, there isn't, so please go back",
        "Wow, you found me User! Let me introduce myself, I am a warning message to tell you to go back",
        "Excuse me! I am trying to have some privacy here! Please go back, I don't wanna see you again"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        try
        {
            var res = await localStorage.GetAsync<string>("MEDU10UsernameState");
            if (res.Success)
            {
                session.UsernameState = res.Value;
            }
        }

        catch (Exception)
        {
            await session.SignOutAsync();
        }

        if (firstRender)
        {
            SqlMapper.AddTypeHandler(new TimeSpanHandler());
            module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Utils.js");
            notificationTimer.Enabled = true;
            notificationTimer.Elapsed += async (s, e) =>
            {
                await PushNotification();
            };
        }
    }

    private string GetWarningMessage()
    {
        var rnd = new Random();
        return NotFoundMessages[rnd.Next(0, 5)];
    }

    public async Task<ClassSchedule> GetOneNextScheduleAsync(DateTime Date, HashSet<ClassSchedule> NotifiedSchedule)
    {
        var time1 = Date.TimeOfDay;
        var time2 = Date.TimeOfDay.Add(TimeSpan.FromMinutes(15));
        var Day = Date.DayOfWeek;
        ClassSchedule schedule;
        using (var dbConnection = new SqliteConnection("Data Source=classmanagement.db"))
        {
            await dbConnection.OpenAsync();
            var schedules = dbConnection.Query<ClassSchedule>(@"SELECT Id, ClassCode, Day, StartTime, EndTime, ClassroomId, OwnerUsername FROM ClassSchedules WHERE Day = @Day", new { Day }).ToList();
            schedule = schedules.Where(s => (!NotifiedSchedule.Contains(s)) && (time1 <= s.StartTime.Value) && (s.StartTime.Value <= time2)).FirstOrDefault();
        }
        return schedule;
    }

    public async Task PushNotification()
    {
        if (session.LoggedState)
        {
            var schedule = await GetOneNextScheduleAsync(DateTime.Now, NotifiedSchedules);
            if (schedule is not null)
            {
                Snackbar.Add($"{schedule.ClassCode} starts at {schedule.StartTime}", Severity.Info, config =>
                {
                    config.Onclick = snackbar =>
                    {
                        navigationManager.NavigateTo("/Classes");
                        return Task.CompletedTask;
                    };
                });
                await module.InvokeVoidAsync("PlayAudio");
                NotifiedSchedules.Add(schedule);
                Timer tempTimer = new(900000);
                tempTimer.Elapsed += async (s, e) =>
                {
                    Snackbar.Add($"{schedule.ClassCode} starts at {schedule.StartTime}", Severity.Info, config =>
                    {
                        config.Onclick = snackbar =>
                        {
                            navigationManager.NavigateTo($"/Class/{schedule.ClassCode}/{schedule.ClassroomId}");
                            return Task.CompletedTask;
                        };
                    });
                    await module.InvokeVoidAsync("PlayAudio");
                    NotifiedSchedules.Remove(schedule);
                    tempTimer.Enabled = false;
                    tempTimer.Dispose();
                };
                tempTimer.Enabled = true;
            }
        }
    }
}
