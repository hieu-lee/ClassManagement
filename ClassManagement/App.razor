@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject ProtectedLocalStorage localStorage
@inject SessionService session
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using System.Timers;
@using Dapper;
@using Microsoft.Data.Sqlite;
@using ClassManagement.Data;

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    HashSet<ClassSchedule> NotifiedSchedules = new();
    Timer notificationTimer = new(30000);
    IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var res = await localStorage.GetAsync<string>("MEDUUsernameState");
                if (res.Success)
                {
                    session.UsernameState = res.Value;
                }
            }
            catch(Exception)
            {
                await session.SignOutAsync();
            }
            SqlMapper.AddTypeHandler(new TimeSpanHandler());
            module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Utils.js");
            notificationTimer.Enabled = true;
            notificationTimer.Elapsed += async (s, e) =>
            {
                await PushNotification();
            };
        }
    }

    public async Task<ClassSchedule> GetOneNextScheduleAsync(DateTime Date, HashSet<ClassSchedule> NotifiedSchedule)
    {
        var time1 = Date.TimeOfDay;
        var time2 = Date.TimeOfDay.Add(TimeSpan.FromMinutes(15));
        var Day = Date.DayOfWeek;
        ClassSchedule schedule;
        using (var dbConnection = new SqliteConnection("Data Source=classmanagement.db"))
        {
            await dbConnection.OpenAsync();
            var schedules = dbConnection.Query<ClassSchedule>(@"SELECT Id, ClassCode, Day, StartTime, EndTime, ClassroomId FROM ClassSchedules WHERE Day = @Day", new { Day }).ToList();
            schedule = schedules.Where(s => (!NotifiedSchedule.Contains(s)) && (time1 <= s.StartTime.Value) && (s.StartTime.Value <= time2)).FirstOrDefault();
        }
        return schedule;
    }

    public async Task PushNotification()
    {
        if (session.LoggedState)
        {
            var schedule = await GetOneNextScheduleAsync(DateTime.Now, NotifiedSchedules);
            if (schedule is not null)
            {
                Snackbar.Add($"{schedule.ClassCode} starts at {schedule.StartTime}", Severity.Info, config =>
                {
                    config.Onclick = snackbar =>
                    {
                        navigationManager.NavigateTo("/Classes");
                        return Task.CompletedTask;
                    };
                });
                await module.InvokeVoidAsync("PlayAudio");
                NotifiedSchedules.Add(schedule);
                Timer tempTimer = new(900000);
                tempTimer.Elapsed += async (s, e) =>
                {
                    Snackbar.Add($"{schedule.ClassCode} starts at {schedule.StartTime}", Severity.Info, config =>
                    {
                        config.Onclick = snackbar =>
                        {
                            navigationManager.NavigateTo($"/Class/{schedule.ClassCode}/{schedule.ClassroomId}");
                            return Task.CompletedTask;
                        };
                    });
                    await module.InvokeVoidAsync("PlayAudio");
                    NotifiedSchedules.Remove(schedule);
                    tempTimer.Enabled = false;
                    tempTimer.Dispose();
                };
                tempTimer.Enabled = true;
            }
        }
    }
}
