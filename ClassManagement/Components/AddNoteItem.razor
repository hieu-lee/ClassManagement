@inject ISnackbar Snackbar
@inject ClassesService classesService

<div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
    <h3 style="text-align: center;">Create new class</h3>
    <EditForm Model="@NewNote" OnValidSubmit="SubmitForm">
        <MudCard Style="border-top: 10px solid #594AE2; padding: 0 3ch;">
            <MudCardContent>
                <MudDatePicker Required="true" Label="Date" @bind-Date="NewNote.Day" For="@(() => NewNote.Day)" />
                <MudTextField Required="true" Label="Content" HelperText="Must be non-empty" @bind-Value="NewNote.Content" For="@(() => NewNote.Content)" />
            </MudCardContent>
            <MudCardActions Style="margin-bottom: 1ch;">
                @if (ButtonLoading)
                {
                    <MudProgressCircular Style="margin: 0 auto;" Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="margin: 0 auto;">Add Note</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {
    [Parameter]
    public string ClassId { get; set; }
    [Parameter]
    public string ClassCode { get; set; }
    private ClassNote NewNote;
    private bool ButtonLoading = false;

    protected override void OnInitialized()
    {
        NewNote = new() { ClassroomId = ClassId };
    }

    private async Task SubmitForm()
    {
        ButtonLoading = true;
        NewNote.Content = NewNote.Content[0].ToString().ToUpper() + NewNote.Content.Substring(1);
        await classesService.AddNewNote(NewNote);
        NewNote = new() { ClassroomId = ClassId };
        ButtonLoading = false;
        Snackbar.Add($"Successfully added new note to {ClassCode}", Severity.Success);
    }
}
