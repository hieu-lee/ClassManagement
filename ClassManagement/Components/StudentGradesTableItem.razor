@inject ClassesService classesService
@inject GradesService gradesService
@inject ISnackbar Snackbar

<MudCard Style="margin-top: 5ch; padding: 0 6.5ch;">
    <div style="display: flex; justify-content: space-between; margin-top: 2ch; padding: 0 2ch;">
        <MudTextField Style="max-width: 30ch;" @bind-Value="searchString" Placeholder="Class Code" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        <div style="margin-top: 1ch;">
            <MudTooltip Text="@Mode">
                <MudIconButton Icon="@EditIcon" @onclick="() => { MultiSelect = !MultiSelect; }" />
            </MudTooltip>
        </div>
    </div>
    <MudTable Filter="new Func<Grade,bool>(FilterFunc)" Items="@MyGrades" Hover="true" Striped="true" MultiSelection="@MultiSelect" @bind-SelectedItems="selectedGrades" SortLabel="Sort By">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Grades of @StudentName</MudText>
            <MudToolBarSpacer />
            <MudButton OnClick="DeleteManyGradesAsync" Variant="Variant.Outlined" Color="Color.Secondary" Style="@($"color: red; border: 1px solid red; display: {deleteManyDisplay}")">Delete Grades</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Grade, object>(x=>x.ClassCode)">Class</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Grade, object>(x=>x.GradeinNum)">Grade in Num</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Grade, object>(x=>x.RelativeValue)">Weight</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Grade, object>(x=>x.ExamName)">Exam Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Grade, object>(x=>x.ExamTime)">Exam Date</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Student Name">@context.ClassCode</MudTd>
            <MudTd DataLabel="Grade in number">@context.GradeinNum</MudTd>
            <MudTd DataLabel="Relevance">@context.RelativeValue</MudTd>
            <MudTd DataLabel="Exam Name">@context.ExamName</MudTd>
            <MudTh DataLabel="Exam Date">@context.ExamTime.Value.ToShortDateString()</MudTh>
            <MudIconButton OnClick="@(async () => { await DeleteGradeAsync(context); })"
                           Icon="@Icons.Material.Filled.Delete">Delete grade</MudIconButton>
        </RowTemplate>

        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
</MudCard>

@code {
    [Parameter]
    public EventCallback OnGradesChange { get; set; }
    [Parameter]
    public string StudentName { get; set; }
    [Parameter]
    public string StudentId { get; set; }
    private HashSet<Grade> MyGrades;
    private bool MultiSelect = false;
    private string deleteManyDisplay => MultiSelect ? "inline" : "none";
    private string Mode => MultiSelect ? "Cancel" : "Edit";
    private string EditIcon => MultiSelect ? Icons.Material.Filled.EditOff : Icons.Material.Filled.Edit;
    private string searchString;
    private HashSet<Grade> selectedGrades;

    protected override async Task OnInitializedAsync()
    {
        var res = await classesService.GetGradesFromStudentAsync(StudentId);
        MyGrades = res.ToHashSet();
    }

    private bool FilterFunc(Grade grade)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (grade.ClassCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteManyGradesAsync()
    {
        await gradesService.DeleteManyGradesAsync(selectedGrades);
        OnGradesChange.InvokeAsync();
        foreach (var s in selectedGrades)
        {
            MyGrades.Remove(s);
        }
        selectedGrades = new();
    }

    private async Task DeleteGradeAsync(Grade grade)
    {
        var res = await gradesService.DeleteGrade(grade.Id);
        if (res.success)
        {
            OnGradesChange.InvokeAsync();
            Snackbar.Add("Successfully deleted grade", Severity.Success);
            MyGrades.Remove(grade);
            StateHasChanged();
            return;
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
            return;
        }
    }
}
