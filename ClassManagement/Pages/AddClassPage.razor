@page "/AddClass"
@inject ClassesService classesService
@inject ISnackbar Snackbar


    <div style="max-width: 500px; margin: 5ch auto; padding-bottom: 5ch;">
        <h3 style="text-align: center;">Fill in the form to create new class</h3>
        <EditForm Model="@NewClass" OnSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Code" HelperText="Must be unique and have 6 characters"
                                  @bind-Value="NewClass.Code" For="@(() => NewClass.Code)" />
                    <MudTextField Label="Name" Class="mt-3"
                                  @bind-Value="NewClass.Name" For="@(() => NewClass.Name)" />
                    <MudTextField Label="Address" Class="mt-3"
                                  @bind-Value="NewClass.Address" For="@(() => NewClass.Address)" />
                    <MudTextField Label="Description" Class="mt-3"
                                  @bind-Value="NewClass.Description" For="@(() => NewClass.Description)" Lines="5" />
                    <ul style="margin-top: 10px;">
                        @foreach (var schedule in DummyClass.Schedules)
                        {
                            <li class="schedule-item" @onclick="@(() => { DummyClass.Schedules.Remove(schedule); })">
                                <span>@schedule.Day.ToString() from @schedule.StartTime.ToString() to @schedule.EndTime.ToString()</span>
                            </li>
                        }
                    </ul>
                    <EditForm Model="@NewSchedule" Context="FormInForm" OnSubmit="AddNewSchedule">
                        <h5 style="margin-top: 20px; text-align: center;">Add schedule</h5>
                        <MudSelect Label="Day of week" Required="true" @bind-Value="NewSchedule.Day" For="@(() => NewSchedule.Day)" T="DayOfWeek">
                            <MudSelectItem Value="@DayOfWeek.Monday" />
                            <MudSelectItem Value="@DayOfWeek.Tuesday" />
                            <MudSelectItem Value="@DayOfWeek.Wednesday" />
                            <MudSelectItem Value="@DayOfWeek.Thursday" />
                            <MudSelectItem Value="@DayOfWeek.Friday" />
                            <MudSelectItem Value="@DayOfWeek.Saturday" />
                            <MudSelectItem Value="@DayOfWeek.Sunday" />
                        </MudSelect>
                        <MudTimePicker Required="true" @bind-Time="@NewSchedule.StartTime" For="@(() => NewSchedule.StartTime)" Label="Start Time" />
                        <MudTimePicker Required="true" @bind-Time="@NewSchedule.EndTime" For="@(() => NewSchedule.EndTime)" Label="End Time" />
                        <MudCardActions Style="margin-bottom: 5px; padding: 10px 0;">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Add New Schedule</MudButton>
                        </MudCardActions>
                    </EditForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="margin: 0 auto;">Add New Class</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>

    @code {
        private Class NewClass = new();
        private Class DummyClass = new() { Code = "BAKA02", Name = "Baka" };
        private ClassSchedule NewSchedule;

        protected override void OnInitialized()
        {
            NewSchedule = new() { ClassRoom = DummyClass };
        }

        private void AddNewSchedule()
        {
            if (NewSchedule.EndTime is null || NewSchedule.StartTime is null)
            {
                Snackbar.Add("You need to fill in the time to add new schedule", Severity.Error);
                return;
            }
            if (NewSchedule.EndTime.Value <= NewSchedule.StartTime.Value)
            {
                Snackbar.Add("The end time must be after the start time", Severity.Error);
                return;
            }
            else
            {
                DummyClass.Schedules.Add(NewSchedule);
                NewSchedule = new() { ClassRoom = DummyClass };
                StateHasChanged();
                Snackbar.Add("Successfully add new schedule to class", Severity.Success);
            }
        }

        private async Task SubmitForm()
        {
            if (string.IsNullOrWhiteSpace(NewClass.Code) || string.IsNullOrWhiteSpace(NewClass.Name))
            {
                Snackbar.Add("You have to fill in all required informations", Severity.Error);
                return;
            }
            Parallel.ForEach(DummyClass.Schedules, schedule =>
            {
                schedule.ClassRoom = NewClass;
            });
            NewClass.Schedules = DummyClass.Schedules;
            NewClass.Code = NewClass.Code.Trim().ToUpper();
            NewClass.Name = NewClass.Name.Trim();
            NewClass.Name = NewClass.Name.First().ToString().ToUpper() + NewClass.Name.Substring(1);
            var res = await classesService.CreateNewClass(NewClass);
            if (res.success)
            {
                NewClass = new();
                StateHasChanged();
                Snackbar.Add("Successfully create new class", Severity.Success);
                return;
            }
            else
            {
                Snackbar.Add(res.err, Severity.Error);
                return;
            }
        }
    }
