@page "/AddGrade"
@inject ClassesService classesService
@inject NavigationManager navigationManager
@inject GradesService gradesService
@inject ISnackbar Snackbar
@inject SessionService session

@if (session.LoggedState)
{
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        <h3 style="text-align: center;">Create new grade</h3>
        <EditForm Model="@NewGrade">
            <DataAnnotationsValidator />
            <MudCard Style="border-top: 10px solid #594AE2">
                <MudCardContent>
                    <MudNumericField Label="Grade in number" Required="true" HelperText="Must be non-empty"
                                     @bind-Value="NewGrade.GradeinNum" For="@(() => NewGrade.GradeinNum)" />
                    <MudNumericField Label="Weight" Required="true" HelperText="Must be non-empty. Default is 1"
                                     @bind-Value="NewGrade.RelativeValue" For="@(() => NewGrade.RelativeValue)" />
                    <MudTextField Label="Exam Name" Required="true" HelperText="Must be non-empty"
                                  @bind-Value="NewGrade.ExamName" For="@(() => NewGrade.ExamName)" />

                    <MudTextField Label="Description" Class="mt-3"
                                  @bind-Value="NewGrade.Description" For="@(() => NewGrade.Description)" Lines="5" />
                    <MudDatePicker @bind-Date="@NewGrade.ExamTime" Label="Exam Date"></MudDatePicker>
                    <div>
                        <h5 style="margin-top: 20px; text-align: center;">Select Class</h5>
                        <MudSelect Label="Class" Required="true" @bind-Value="@ClassCode" T="string">
                            @foreach (var Code in ClassCodes)
                            {
                                <MudSelectItem T="string" Value="@Code">@Code</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                    <div>
                        <h5 style="margin-top: 20px; text-align: center;">Select Student</h5>
                        <MudSelect Label="Student" Required="true" @bind-Value="@gradeStudent" T="Student">
                            @foreach (var s in Students)
                            {
                                <MudSelectItem T="Student" Value="@s">@s.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudButton @onclick="AddNewGrade" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Add Grade</MudButton>
                </MudCardActions>

            </MudCard>
        </EditForm>
    </div>
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}


@code {
    private HashSet<string> NewStudentCodes = new();
    private string ClassCode;
    private Student gradeStudent;
    private Grade NewGrade = new();
    private List<string> ClassCodes;
    private List<MudSelectItem<string>> smts = new();
    public SortedSet<Student> AllStudents;
    public HashSet<Student> Students;

    protected override async Task OnInitializedAsync()
    {
        if (!session.LoggedState)
        {
            navigationManager.NavigateTo("/");
            return;
        }
        ClassCodes = await classesService.GetAllClassCodes();
        AllStudents = gradesService.GetAllStudents();
        Students = AllStudents.ToHashSet();

        ClassCode = string.Empty;
        NewGrade.GradeinNum = 5;
        NewGrade.RelativeValue = 1;

        NewGrade.Description = string.Empty;
        NewGrade.ExamTime = DateTime.Now;
        NewGrade.ExamName = string.Empty;
    }

    private async Task GetStudentsFromClass()
    {
        var res = await classesService.GetClassAsync(ClassCode);
        Students = res.Students;
    }

    private async Task AddNewGrade()
    {
        if (string.IsNullOrEmpty(ClassCode))
        {
            Snackbar.Add("You have to fill in the class code", Severity.Error);
            return;
        }
        if (gradeStudent is null)
        {
            Snackbar.Add("You have to fill in the student name", Severity.Error);
            return;
        }
        if (string.IsNullOrEmpty(NewGrade.ExamName))
        {
            Snackbar.Add("You have to fill in the exam name", Severity.Error);
            return;
        }
        if (NewGrade.ExamTime is null)
        {
            Snackbar.Add("You have to choose an exam date", Severity.Error);
            return;
        }
        if (NewGrade.GradeinNum > 10 || NewGrade.GradeinNum < 1)
        {
            Snackbar.Add("Grade in Num must be between 1 and 10", Severity.Error);
            return;
        }


        ServiceResult task= await gradesService.CreateNewGradeAsyncBetter(NewGrade, ClassCode, gradeStudent);
        if (!task.success)
        {
            Snackbar.Add(task.err, Severity.Error);
        }

        else Snackbar.Add("Successfully added new grade", Severity.Success);

        ClassCode = string.Empty;
        NewGrade.GradeinNum = 5;
        NewGrade.RelativeValue = 1;

        NewGrade.Description = string.Empty;
        NewGrade.ExamTime = DateTime.Now;
        NewGrade.ExamName = string.Empty;
        return;
    }

}
