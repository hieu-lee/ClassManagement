@page "/AddStudent"
@inject ClassesService classesService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject SessionService session

@if (session.LoggedState)
{
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        <h3 style="text-align: center;">Create new student record</h3>
        <EditForm Model="@NewStudent" OnValidSubmit="SubmitForm">
            <DataAnnotationsValidator />
            <MudCard Style="border-top: 10px solid #594AE2">
                <MudCardContent>
                    <MudTextField Label="Name" Required="true" HelperText="Must be non-empty"
                                  @bind-Value="NewStudent.Name" For="@(() => NewStudent.Name)" />
                    <MudDatePicker Label="Date of Birth" Required="true" @bind-Date="NewStudent.DateOfBirth" For="@(() => NewStudent.DateOfBirth)" />
                    <MudSelect Label="Gender" Required="true" @bind-Value="NewStudent.Gender" For="@(() => NewStudent.Gender)" T="string">
                        <MudSelectItem Value="@("Male")" />
                        <MudSelectItem Value="@("Female")" />
                        <MudSelectItem Value="@("Other")" />
                    </MudSelect>
                    <MudTextField Label="Description" Class="mt-3"
                                  @bind-Value="NewStudent.Description" For="@(() => NewStudent.Description)" Lines="5" />
                    <ul style="margin-top: 10px;">
                        @foreach (var Code in NewStudentCodes)
                        {
                            <li class="class-code" @onclick="@(() => { NewStudentCodes.Remove(Code); })">
                                <span>@Code</span>
                            </li>
                        }
                    </ul>
                    <div>
                        <h5 style="margin-top: 20px; text-align: center;">Add Class</h5>
                        <MudSelect Label="Class" Required="true" @bind-Value="@NewCode" T="string">
                            @foreach (var Code in ClassCodes)
                            {
                                <MudSelectItem T="string" Value="@Code">@Code</MudSelectItem>
                            }
                        </MudSelect>
                        <MudCardActions>
                            <MudButton @onclick="AddNewClassCode" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Add Class</MudButton>
                        </MudCardActions>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    @if (ButtonLoading)
                    {
                        <MudProgressCircular Style="margin: 0 auto;" Color="Color.Primary" Indeterminate="true" />
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="margin: 0 auto;">Add Student Record</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}


@code {
    private HashSet<string> NewStudentCodes = new();
    private string NewCode;
    private Student NewStudent = new();
    private List<string> ClassCodes;
    private List<MudSelectItem<string>> smts = new();
    private bool ButtonLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (!session.LoggedState)
        {
            navigationManager.NavigateTo("/");
            return;
        }
        ClassCodes = await classesService.GetAllClassCodes();
    }

    private async Task SubmitForm()
    {
        ButtonLoading = true;
        var names = NewStudent.Name.Trim().ToLower().Split(' ');
        var name = "";
        for (int i = 0; i < names.Length; i++)
        {
            if (!string.IsNullOrWhiteSpace(names[i]))
            {
                names[i] = names[i].Trim();
                var temp = names[i][0].ToString().ToUpper() + names[i].Substring(1);
                name += temp + " ";
            }
        }
        name = name.TrimEnd();
        NewStudent.Name = name;
        var task = classesService.CreateNewStudent(NewStudent, NewStudentCodes);
        NewStudent = new();
        NewStudentCodes = new();
        await task;
        ButtonLoading = false;
        Snackbar.Add("Successfully added new student record", Severity.Success);
        return;
    }

    private void AddNewClassCode()
    {
        if (NewCode is null)
        {
            Snackbar.Add("You have to fill in the class code", Severity.Error);
            return;
        }
        if (NewStudentCodes.Contains(NewCode))
        {
            return;
        }
        NewStudentCodes.Add(NewCode);
        Snackbar.Add("Successfully added new class", Severity.Success);
        return;
    }
}
