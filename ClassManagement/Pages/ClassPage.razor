@page "/Class/{Code}/{Id}"
@inject SessionService session
@inject ClassesService classesService
@inject GradesService gradesService
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Style="margin-bottom: 1ch;" Typo="Typo.h3" Align="Align.Center">@Code</MudText>
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <h3 style="text-align: center;">Getting information of class @Code</h3>
    }
    else
    {
        <MudTabs Elevation="4" Rounded="true" Centered="true">
            <MudTabPanel Text="Info">
                <MudPaper Style="margin-top: 5ch; padding: 3ch;">
                    <MudText Typo="Typo.h4">
                        @Code - @MyClass.Name
                    </MudText>
                    <hr />
                    <MudText Typo="Typo.h4">
                        General Description
                    </MudText>
                    <MudText Typo="Typo.body1" Style="margin-top: 1ch;">
                        @((string.IsNullOrWhiteSpace(MyClass.Description)) ? "This class has no description": MyClass.Description)
                    </MudText>
                    <hr />
                    <MudText Typo="Typo.h4">
                        Address and Schedules
                    </MudText>
                    <ul style="list-style: none; margin-top: 1ch;">
                        <li style="display: flex;">
                            <MudIcon Icon="@Icons.Material.Filled.Home" />
                            <MudText Style="margin-left: 1ch;" Typo="Typo.subtitle1">Address: @(string.IsNullOrWhiteSpace(MyClass.Address) ? "This class has no address information" : MyClass.Address)</MudText>
                        </li>
                        <li style="display: flex; margin: 0.5ch 0;">
                            <MudIcon Icon="@Icons.Material.Filled.People" />
                            <MudText Style="margin-left: 1ch;" Typo="Typo.subtitle1">Number of Students: @MyClass.NumberOfStudent</MudText>
                        </li>
                        <li style="display: flex; margin: 0.5ch 0;">
                            <MudIcon Icon="@Icons.Material.Filled.Grading" />
                            <MudText Style="margin-left: 1ch;" Typo="Typo.subtitle1">Average Grade: @AverageGrade</MudText>
                        </li>
                        <li>
                            <div style="display: flex;">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                                <MudText Style="margin-left: 1ch;" Typo="Typo.subtitle1">Schedules:</MudText>
                            </div>
                            <ul style="list-style: none; margin-top: 1.5ch;">
                                @foreach (var schedule in MyClass.Schedules)
                                {
                                    <li class="schedule-item" @onclick="@(async () => { await DeleteScheduleAsync(schedule); })">
                                        <span>@schedule.Day.ToString() from @schedule.StartTime.ToString() to @schedule.EndTime.ToString()</span>
                                    </li>
                                }
                            </ul>
                            <EditForm Model="NewSchedule" OnValidSubmit="AddNewScheduleToClass">
                                <h5 style="margin-top: 20px; text-align: center;">Add schedule</h5>
                                <MudSelect Label="Day of week" Required="true" @bind-Value="NewSchedule.Day" For="@(() => NewSchedule.Day)" T="DayOfWeek">
                                    <MudSelectItem Value="@DayOfWeek.Monday" />
                                    <MudSelectItem Value="@DayOfWeek.Tuesday" />
                                    <MudSelectItem Value="@DayOfWeek.Wednesday" />
                                    <MudSelectItem Value="@DayOfWeek.Thursday" />
                                    <MudSelectItem Value="@DayOfWeek.Friday" />
                                    <MudSelectItem Value="@DayOfWeek.Saturday" />
                                    <MudSelectItem Value="@DayOfWeek.Sunday" />
                                </MudSelect>
                                <MudTimePicker Required="true" @bind-Time="@NewSchedule.StartTime" For="@(() => NewSchedule.StartTime)" Label="Start Time" />
                                <MudTimePicker Required="true" @bind-Time="@NewSchedule.EndTime" For="@(() => NewSchedule.EndTime)" Label="End Time" />
                                <MudCardActions Style="margin-bottom: 5px; padding: 10px 0;">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Add New Schedule</MudButton>
                                </MudCardActions>
                            </EditForm>
                        </li>
                    </ul>
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="Students">
                <StudentsFromClassItem @bind-Students="@MyClass.Students" ClassId="@Id" />
            </MudTabPanel>
            <MudTabPanel Text="Grades Table">
                <GradesTableItem ClassId="@Id" OnGradesChange="async () => { AverageGrade = await gradesService.CalculateAverageGradeOfClass(Id); }" ClassCode="@Code" />
            </MudTabPanel>
            <MudTabPanel Text="Grades Chart">
                <GradesChartItem ClassId="@Id" ClassCode="@Code" />
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>


@code {
    [Parameter]
    public string Code { get; set; }
    [Parameter]
    public string Id { get; set; }
    private double AverageGrade { get; set; }
    private Class MyClass;
    private ClassSchedule NewSchedule;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (!session.LoggedState)
        {
            navigationManager.NavigateTo("/");
            return;
        }
        NewSchedule = new() { ClassroomId = Id, ClassCode = Code };
        var task1 = gradesService.CalculateAverageGradeOfClass(Id);
        MyClass = await classesService.GetClass(Id);
        HashSet<double?> TempWeights = new();
        TempWeights.Add(null);
        AverageGrade = await task1;
        loading = false;
    }

    private async Task DeleteScheduleAsync(ClassSchedule schedule)
    {
        var res = await classesService.DeleteSchedule(schedule.Id);
        if (res.success)
        {
            Snackbar.Add("Successfully deleted schedule", Severity.Success);
            MyClass.Schedules.Remove(schedule);
            StateHasChanged();
            return;
        }
        Snackbar.Add(res.err, Severity.Error);
    }

    private async Task AddNewScheduleToClass()
    {
        if (MyClass.Schedules.Contains(NewSchedule))
        {
            return;
        }
        if (NewSchedule.EndTime is null || NewSchedule.StartTime is null)
        {
            Snackbar.Add("You need to fill in the time to add new schedule", Severity.Error);
            return;
        }
        if (NewSchedule.EndTime.Value <= NewSchedule.StartTime.Value)
        {
            Snackbar.Add("The end time must be after the start time", Severity.Error);
            return;
        }
        else
        {
            var res = await classesService.AddNewScheduleToClass(NewSchedule, Id);
            if (res.success)
            {
                MyClass.Schedules.Add(NewSchedule);
                NewSchedule = new() { ClassroomId = Id, ClassCode = Code };
                StateHasChanged();
                Snackbar.Add("Successfully add new schedule to class", Severity.Success);
                return;
            }
            else
            {
                Snackbar.Add(res.err, Severity.Error);
                return;
            }
        }
    }
}