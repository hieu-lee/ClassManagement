@page "/Login"
@inject ClassesService classesService
@inject GradesService gradesService
@inject AccountsService accountsService
@inject SessionService sessionService
@inject NavigationManager navigationManager
@using ClassManagement.Services
@inject ISnackbar Snackbar

@if (!RegisterMode)
{
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        Don't have account yet?
        <span @onclick="() => { RegisterMode = true; }" class="register">Register</span>
    </div>
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        <h3 style="text-align: center;">Login</h3>
        <EditForm Model="@NewAccount">
            <DataAnnotationsValidator />
            <MudCard Style="border-top: 10px solid #594AE2">
                <MudCardContent>
                    <MudTextField Label="Username" Required="true" HelperText="Must be non-empty"
                                  @bind-Value="NewAccount.Username" For="@(() => NewAccount.Username)" />
                    <MudTextField Label="Password" Required="true" HelperText="Must be between 6 and 15 characters"
                                  @bind-Value="NewAccount.Password" For="@(() => NewAccount.Password)" />
                </MudCardContent>

                <MudCardActions>
                    <MudButton @onclick="CheckLogin" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}

else
{
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        Already have an account?
        <span @onclick="() => { RegisterMode = false; }" class="login">Login</span>
    </div>
    <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
        <h3 style="text-align: center;">Create a new account</h3>
        <EditForm Model="@NewAccount">
            <DataAnnotationsValidator />
            <MudCard Style="border-top: 10px solid #594AE2">
                <MudCardContent>
                    <MudTextField Label="Username" Required="true" HelperText="Must be non-empty"
                                  @bind-Value="NewAccount.Username" For="@(() => NewAccount.Username)" />
                    <MudTextField Label="Password" Required="true" HelperText="Must be between 6 and 15 characters"
                                  @bind-Value="NewAccount.Password" For="@(() => NewAccount.Password)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton @onclick="RegisterNew" Variant="Variant.Outlined" Color="Color.Secondary" Style="margin: 0 auto;">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
}

@code {

    private bool RegisterMode = false;
    private Account NewAccount = new();
    private Student AccountStudent = new();
    private async Task CheckLogin()
    {
        string dbpass = EncryptionService.Encrypt(NewAccount.Password);
        var res = await accountsService.CheckValid(NewAccount.Username, dbpass);
        if (res.success)
        {
            Snackbar.Add("Login Successful", Severity.Success);
            await sessionService.SignInAsync(res.svAccount);
            navigationManager.NavigateTo("/Students");
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
        }
        NewAccount.Password = string.Empty;
    }

    private async Task RegisterNew()
    {
        if (accountsService.CheckLength(NewAccount.Password) == false)
        {
            Snackbar.Add("Password should be between 6 and 15 characters", Severity.Error);
            NewAccount.Password = string.Empty;
            return;
        }
        string dbpass = EncryptionService.Encrypt(NewAccount.Password);
        var res = await accountsService.CreateNewAccountAsync(NewAccount.Username, dbpass);
        if (res.success)
        {
            Snackbar.Add("Successfully created new account", Severity.Success);
            await sessionService.SignUpAsync(res.svAccount);
            RegisterMode = false;
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
        }
        NewAccount.Username = string.Empty;
        NewAccount.Password = string.Empty;

    }
    @*protected override async Task OnInitializedAsync()
        {

        }*@
}
