@page "/Login"
@inject ClassesService classesService
@inject GradesService gradesService
@inject AccountsService accountsService
@inject SessionService sessionService
@inject NavigationManager navigationManager
@using ClassManagement.Services
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large">
    @if (sessionService.LoggedState)
    {
        <MudCard Style="padding: 5ch; margin-top: 10ch;">
            <MudText Align="Align.Center" Typo="Typo.h4">You have already logged in as @sessionService.UsernameState</MudText>
            <div style="display: flex; justify-content: center; margin-top: 1.5ch;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LogOut">Log Out</MudButton>
            </div>
        </MudCard>
    }
    else
    {
        @if (!RegisterMode)
        {
            <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
                <h3 style="text-align: center;">Login</h3>
                <EditForm Model="@NewAccount" OnValidSubmit="CheckLogin">
                    <DataAnnotationsValidator />
                    <MudCard Style="border-top: 10px solid #594AE2">
                        <MudCardContent>
                            <MudTextField Label="Username" Required="true" HelperText="Must be non-empty"
                                          @bind-Value="NewAccount.Username" For="@(() => NewAccount.Username)" />
                            <MudTextField InputType="InputType.Password" Label="Password" Required="true" HelperText="Must be between 6 and 15 characters"
                                          @bind-Value="NewAccount.Password" For="@(() => NewAccount.Password)" />
                        </MudCardContent>

                        <MudCardActions>
                            @if (ButtonLoading)
                            {
                                <MudProgressCircular Style="margin: 0 auto;" Color="Color.Primary" Indeterminate="true" />
                            }
                            else
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Style="margin: 0 auto;">Login</MudButton>
                            }
                        </MudCardActions>
                        <div style="display: flex; justify-content: center;">
                            <div style="margin-bottom: 1.5ch;">
                                Don't have account yet?
                                <span @onclick="() => { RegisterMode = true; ResetFields(); }" class="register">Register</span>
                            </div>
                        </div>
                    </MudCard>
                </EditForm>
            </div>
        }

        else
        {
            <div style="max-width: 550px; margin: 3ch auto; padding-bottom: 3ch;">
                <h3 style="text-align: center;">Create a new account</h3>
                <EditForm Model="@NewAccount" OnValidSubmit="RegisterNew">
                    <DataAnnotationsValidator />
                    <MudCard Style="border-top: 10px solid #594AE2">
                        <MudCardContent>
                            <MudTextField Label="Username" Required="true" HelperText="Must be non-empty"
                                          @bind-Value="NewAccount.Username" For="@(() => NewAccount.Username)" />
                            <MudTextField InputType="InputType.Password" Label="Password" Required="true" HelperText="Must be between 6 and 15 characters"
                                          @bind-Value="NewAccount.Password" For="@(() => NewAccount.Password)" />
                            <MudTextField InputType="InputType.Password" Label="Confirm Password" Required="true" HelperText="Confirm your password"
                                          @bind-Value="ConfirmPassword" />
                        </MudCardContent>
                        <MudCardActions>
                            @if (ButtonLoading)
                            {
                                <MudProgressCircular Style="margin: 0 auto;" Color="Color.Secondary" Indeterminate="true" />
                            }
                            else
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Secondary" Style="margin: 0 auto;">Register</MudButton>
                            }
                        </MudCardActions>
                        <div style="display: flex; justify-content: center;">
                            <div style="margin-bottom: 1.5ch;">
                                Already have an account?
                                <span @onclick="() => { RegisterMode = false; ResetFields(); }" class="login">Login</span>
                            </div>
                        </div>
                    </MudCard>
                </EditForm>
            </div>
        }
    }
</MudContainer>

@code {
    private string ConfirmPassword;
    private bool RegisterMode = false;
    private Account NewAccount = new();
    private Student AccountStudent = new();
    private bool ButtonLoading = false;

    private void ResetFields()
    {
        NewAccount = new();
        ConfirmPassword = string.Empty;
    }

    private async Task CheckLogin()
    {
        ButtonLoading = true;
        string dbpass = EncryptionService.Encrypt(NewAccount.Password);
        var res = await accountsService.SignInAsync(NewAccount.Username, dbpass);
        ButtonLoading = false;
        if (res.success)
        {
            Snackbar.Add("Login Successful", Severity.Success);
            navigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
        }
        NewAccount.Password = string.Empty;
    }

    private async Task RegisterNew()
    {
        if (ConfirmPassword != NewAccount.Password)
        {
            Snackbar.Add("Incorrect password confirmation", Severity.Error);
            return;
        }
        ButtonLoading = true;
        string dbpass = EncryptionService.Encrypt(NewAccount.Password);
        var res = await accountsService.SignUpAsync(NewAccount.Username, dbpass);
        ButtonLoading = false;
        if (res.success)
        {
            Snackbar.Add("Successfully created new account", Severity.Success);
            await sessionService.SignUpAsync(res.svAccount);
            RegisterMode = false;
            navigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
        }
        NewAccount.Username = string.Empty;
        NewAccount.Password = string.Empty;

    }

    private async Task LogOut()
    {
        await accountsService.SignOutAsync();
    }
}
