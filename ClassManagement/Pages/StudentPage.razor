@page "/Student/{Id}"
@inject ClassesService classesService
@inject GradesService gradesService
@inject NavigationManager navigationManager
@inject SessionService session

<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard Style="padding: 5ch 3ch 10ch 3ch; margin: 3ch 0; background: #7467EF;">
        <div style="display: flex">
            <MudAvatar Style="background-color: #E6E6E6; width: 90px; height: 90px;">
                <MudIcon Style="color: #ffffff; width: 70px; height: 70px" Icon="@Icons.Material.Filled.PeopleAlt" />
            </MudAvatar>
            <MudText Style="margin-left: 1.5ch; color: #ffffff" Typo="Typo.h2">@MyStudent.Name</MudText>
        </div>
    </MudCard>
    <MudTabs Elevation="4" Rounded="true" Centered="true">
        <MudTabPanel Text="Info">
            <MudCard Style="margin: 3ch 0; padding: 3.5ch;">
                <MudText Typo="Typo.h3">MEDU Profile</MudText>
                <hr/>
                <div style="display: flex; justify-content: space-between;">
                    <div>
                        <div class="student-details" style="height: 20ch;">
                            <MudText Typo="Typo.h4">Student details</MudText>
                            <MudText Typo="Typo.subtitle1">Gender: @MyStudent.Gender</MudText>
                            <MudText Typo="Typo.subtitle1">Date of Birth: @MyStudent.DateOfBirth.Value.ToShortDateString()</MudText>
                            <MudText Typo="Typo.subtitle1">Age: @MyStudent.Age</MudText>
                        </div>
                        <div class="classes-details">
                            <MudText Typo="Typo.h4">Classes details</MudText>
                            <ul style="list-style: none;">
                                @foreach (var cls in MyStudent.Classes)
                                {
                                    <li>
                                        <MudLink Href="@($"/Class/{cls.Code}/{cls.Id}")">@cls.Code</MudLink>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div>
                        <div class="description" style="height: 20ch; overflow-y: scroll">
                            <MudText Typo="Typo.h4">Description</MudText>
                            <MudText Typo="Typo.body1">@Description</MudText>
                        </div>
                        <div class="Grades">
                            <MudText Typo="Typo.h4">Grades Overview</MudText>
                            @foreach (var cls in MyStudent.Classes)
                            {
                                <MudText Typo="Typo.body1">Average Grade in @cls.Code: @AverageGrades[cls.Id]</MudText>
                            }
                        </div>
                    </div>
                </div>
            </MudCard>
        </MudTabPanel>
        <MudTabPanel Text="Grades Table">
            <StudentGradesTableItem StudentName="@MyStudent.Name" StudentId="@MyStudent.Id" OnGradesChange="RecalculateAverageGrades" />
        </MudTabPanel>
        <MudTabPanel Text="Grades Chart">
            <StudentGradesChartItem StudentName="@MyStudent.Name" StudentId="@MyStudent.Id" />
        </MudTabPanel>
    </MudTabs>

</MudContainer>

@code {
    [Parameter]
    public string Id { get; set; }
    private Student MyStudent { get; set; } = new();
    private string Description => (string.IsNullOrWhiteSpace(MyStudent.Description)) ? "This student has no description" : MyStudent.Description;
    private Dictionary<string, double> AverageGrades = new();

    protected override async Task OnInitializedAsync()
    {
        if (!session.LoggedState)
        {
            navigationManager.NavigateTo("/");
            return;
        }
        var res = await classesService.GetStudentAsync(Id);
        MyStudent = res.svStudent;
        var avgGradeRes = await gradesService.GetAverageGradesFromStudentAndClasses(MyStudent.Classes, Id); ;
        AverageGrades = avgGradeRes.AverageGrades;
    }

    private async Task RecalculateAverageGrades()
    {
        var avgGradeRes = await gradesService.GetAverageGradesFromStudentAndClasses(MyStudent.Classes, Id); ;
        AverageGrades = avgGradeRes.AverageGrades;
    }
}
