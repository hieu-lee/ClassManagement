@page "/students"
@inject ClassesService classesService

<h3>Student Records</h3>
@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    <h3 style="text-align: center;">Getting student records</h3>
}
else
{
    <div class="search" style="display: flex;">
        <MudTextField Style="max-width: 400px;" @bind-Value="@SearchName" Placeholder="Type student's name here" Label="Name"/>
        <MudTextField Style="max-width: 400px;" @bind-Value="@SearchClass" Placeholder="Type student's class here" Label="Class"/>
        <MudIconButton @onclick="DisplayStudents" Style="color: #594AE2" Icon="@Icons.Material.Filled.Search" />
    </div>
    <ul style="margin-top: 3ch;">
        <Virtualize Items="StudentsToDisplay" Context="student">
            <li style="display: flex;">
                <MudIconButton Icon="@Icons.Material.Filled.People" Style="width: 30px; height: 30px;"/>
                <div class="student-info">
                    <MudText Typo="Typo.h6">@student.Name</MudText>
                    <MudText Typo="Typo.body2">Age: @student.Age</MudText>
                    <MudText Typo="Typo.body2">Gender: @student.Gender</MudText>
                    <MudText Typo="Typo.body2">Class(es): @student.GetAllClassesCode()</MudText>
                </div>
            </li>
        </Virtualize>
    </ul>
}

@code {
    private SortedSet<Student> MyStudents;
    private SortedSet<Student> StudentsToDisplay;
    private bool loading = true;
    private string SearchName;
    private string SearchClass;

    protected override async Task OnInitializedAsync()
    {
        var task = Task.Factory.StartNew(() =>
        {
            MyStudents = classesService.GetAllStudents().Students;
            loading = false;
        });
        await task;
        StudentsToDisplay = MyStudents;
    }

    private void DisplayStudents()
    {
        SearchName = SearchName.Trim().ToUpper();
        SearchClass = SearchClass.Trim().ToUpper();
        if (string.IsNullOrWhiteSpace(SearchName) && string.IsNullOrWhiteSpace(SearchClass))
        {
            StudentsToDisplay = MyStudents;
            return;
        }
        StudentsToDisplay = new();
        if (!string.IsNullOrWhiteSpace(SearchClass) && !string.IsNullOrWhiteSpace(SearchName))
        {
            foreach (var student in MyStudents)
            {
                if (student.Name.ToUpper() == SearchName && student.Classes.Contains(new() { Code = SearchClass }))
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
        if (!string.IsNullOrWhiteSpace(SearchClass))
        {
            foreach (var student in MyStudents)
            {
                if (student.Classes.Contains(new() { Code = SearchClass }))
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
        if (!string.IsNullOrWhiteSpace(SearchName))
        {
            foreach (var student in MyStudents)
            {
                if (student.Name.ToUpper() == SearchName)
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
    }

}
