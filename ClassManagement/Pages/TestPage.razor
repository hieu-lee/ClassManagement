@page "/Grades/{id}"
@page "/grade"
@page "/Grades"
@inject NavigationManager navigationManager
@inject GradesService gradesService
@inject ClassesService classesService

<h3>TestPage</h3>

<span> Current grades stored: </span>
<br />

<MudTextField @bind-Value="NewStudentName" Label="Student Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
<br />

<MudTextField @bind-Value="ClassCode" Label="Class Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
<br />

<MudTextField @bind-Value="NewGradeInNum" Label="Student Score" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
<br />

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddNewScore">Add New Score</MudButton>
<br />



<ul>
    @foreach (var grade in myGrades)
    {
        <li>@grade.StdName, @grade.GradeinNum, @grade.ClassCode, id = @grade.Id</li>
    }
</ul>

<br />
<br />
<MudButton Link="https://hieu-lee.github.io/portfolio"
           Target="_blank"
           Variant="Variant.Text"
           EndIcon="@Icons.Custom.Brands.GitHub"
           Color="Color.Primary"
           Style="text-transform:none"
           Disabled=@disabled>
    HieuLe's Portfolio
</MudButton>

<br />
<br />
<MudTextField @bind-Value="StudentToDisplay" Label="Student to Display scores" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
<br />

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DisplayScore">Display Student Score</MudButton>
<br />

<ul>
    @if (studentGrades != null && studentGrades.Any())
        @foreach (var grade in studentGrades)
        {
            <li>@grade.StdName, @grade.GradeinNum, @grade.ClassCode, id = @grade.Id</li>
            <MudTextField @bind-Value="@grade.GradeinNum"> </MudTextField>
        }
</ul>



@code {

    bool disabled = false;

    [Parameter]
    public string id { get; set; }

    [Parameter]
    public bool testbool { get; set; }

    [Parameter]
    public string AlertText { get; set; }

    private SortedSet<Grade> myGrades;
    private SortedSet<Grade> studentGrades;

    private double NewGradeInNum;

    private string NewStudentName;

    private string ClassCode;

    private string StudentToDisplay;

    private Student defaultStudent;

    private Class defaultClass;

    private Grade myGrade = new();

    private async Task AddNewScore()
    {
        if (string.IsNullOrEmpty(NewStudentName)) NewStudentName = "HieuLe"; // default value
        defaultStudent = gradesService.GetStudentFromName(NewStudentName);
        // maybe alerts


        if (string.IsNullOrEmpty(ClassCode)) ClassCode = "CSE101"; // default value
        defaultClass = gradesService.GetClassFromCode(ClassCode);


        myGrade = new()
        {
            Student = defaultStudent,
            Classroom = defaultClass,
            GradeinNum = NewGradeInNum,
            StdName = defaultStudent.Name
        };
        myGrades.Add(myGrade);
        await gradesService.CreateNewGradeAsync(myGrade);

        NewGradeInNum = 0;
        NewStudentName = string.Empty;
        ClassCode = string.Empty;
    }

    //display score of student X
    private void DisplayScore()
    {
        // search for student with said name
        Student std1 = gradesService.GetStudentFromName(StudentToDisplay);

        ServiceResult svrs = gradesService.GetGradesFromStudent(std1);
        studentGrades = svrs.Grades;
    }

    protected override void OnInitialized()
    {
        myGrades = gradesService.GetAllGrades();
    }


}
