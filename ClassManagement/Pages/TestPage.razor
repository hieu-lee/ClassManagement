@page "/grade/{id}"
@page "/grade"
@inject NavigationManager navigationManager
@inject GradesService gradesServive
@inject TestService TestService
<h3>TestPage</h3>

<MudTextField @bind-Value="NewGradeInNum" Label="Standard" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
<br/>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddNewClass">Add New Class</MudButton>
<ul>
    @foreach (var grade in myGrades)
            {
                <li>@grade.Id, @grade.GradeinNum</li>
            }
</ul>

@code {
    [Parameter]
    public string id { get; set; }

    [Parameter]
    public bool testbool { get; set; }

    [Parameter]
    public string AlertText { get; set; }

    private SortedSet<Grade> myGrades;

    private double NewGradeInNum;

    private Student defaultStudent = new() { Name = "Hieu" };

    private Class defaultClass = new() { Code = "CSE101", Name = "CS" };

    private Grade myGrade = new();

    private async Task AddNewClass()
    {
        myGrade = new() { Student=defaultStudent, Classroom=defaultClass, GradeinNum = NewGradeInNum };
        myGrades.Add(myGrade);
        await gradesServive.CreateNewGradeAsync(myGrade);
        NewGradeInNum = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        myGrades = gradesServive.GetAllGrades();
    }
}
