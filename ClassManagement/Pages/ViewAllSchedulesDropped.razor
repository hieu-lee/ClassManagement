@page "/DroppedSchedules"
@inject ClassesService classesService
@inject ISnackbar Snackbar
@inject GradesService gradesService
@inject NavigationManager NavManager
@inject SessionService session

@*<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Style="text-align: center;" Typo="Typo.h3">Schedules timetable</MudText>
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <MudText Typo="Typo.h3" Style="text-align: center;">Getting schedules</MudText>
    }
    else
    {
        <span>@schedules.Count()</span>
        <div style="display: flex; justify-content: space-between; margin-top: 3ch;">

            <div style="display:flex; align-items: center">
                <div>                  
                    <div style="margin-top: 1ch;">
                        <MudTooltip Text="@Mode">
                            <MudIconButton Icon="@EditIcon" Style="color: #594AE2" @onclick="() => { MultiSelect = !MultiSelect; }" />
                        </MudTooltip>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <MudCard Style="margin-top: 3ch;">
                <MudTable Items="@schedules" Hover="true" Striped="true" MultiSelection="@MultiSelect" @bind-SelectedItems="selectedSchedules">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Schedules Table</MudText>
                        <MudToolBarSpacer />
                        <MudButton OnClick="DeleteManySchedulesAsync" Variant="Variant.Outlined" Color="Color.Secondary" Style="@($"color: red; border: 1px solid red; display: {deleteManyDisplay}")">Delete Schedules</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Monday</MudTh>
                        <MudTh>Tuesday</MudTh>
                        <MudTh>Wednesday</MudTh>
                        <MudTh>Thursday</MudTh>
                        <MudTh>Friday</MudTh>
                        <MudTh>Saturday</MudTh>
                        <MudTh>Sunday</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="MondaySchedule">@context.Day</MudTd>
                        <MudTd DataLabel="Grade in number">@context.StartTime</MudTd>
                        <MudTd DataLabel="Relevance">@context.EndTime</MudTd>
                        <MudTd DataLabel="Class Code">@context.ClassCode</MudTd>
                        <MudTd DataLabel="Exam Name">@context.OwnerUsername</MudTd>
                        
                        <MudIconButton OnClick="@(async () => { await DeleteScheduleAsync(context); })"
                                       Icon="@Icons.Material.Filled.Delete">Delete Schedule</MudIconButton>
                    </RowTemplate>

                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            </MudCard>
        </div>
    }
</MudContainer>*@

@*<div style="display:flex; justify-content: center;">
    <div style="display:flex;">
        @for (int i = 0; i < 7; i++)
        {
        <DayColumn day=i schedules=data[i] />
        }
    </div>
</div>*@

@*@code {
    private bool loading = true;
    private bool MultiSelect = false;
    private HashSet<ClassSchedule> selectedSchedules;
    private SortedSet<ClassSchedule> displaySchedules = new();
    private SortedSet<ClassSchedule> schedules;
    private string Mode => MultiSelect ? "Cancel" : "Edit";
    private string deleteManyDisplay => MultiSelect ? "inline" : "none";
    private string EditIcon => MultiSelect ? Icons.Material.Filled.EditOff : Icons.Material.Filled.Edit;

    private async Task DeleteScheduleAsync (ClassSchedule schedule)
    {
        var res = await gradesService.DeleteSchedule(schedule.Id);
        if (res.success)
        {
            Snackbar.Add("Successfully deleted schedule", Severity.Success);
            schedules.Remove(schedule);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
        }
        selectedSchedules = new();
    }

    private async Task DeleteManySchedulesAsync()
    {
        await gradesService.DeleteManySchedulesAsync(selectedSchedules);
        foreach (var s in selectedSchedules)
        {
            schedules.Remove(s);
        }
    }

    protected override void OnInitialized()
    {
        //if (!session.LoggedState)
        //{
        //    NavManager.NavigateTo("/");
        //    return;
        //}
        loading = true;

        if (schedules is null)
        {
            schedules = gradesService.GetAllSchedules();
            
        }
        loading = false;
    }
}*@
