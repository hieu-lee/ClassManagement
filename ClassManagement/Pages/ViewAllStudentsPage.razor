@page "/Students"
@inject ClassesService classesService
@inject ISnackbar Snackbar
@inject NotificationService notificationService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Style="text-align: center;" Typo="Typo.h3">Student Records</MudText>
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <MudText Typo="Typo.h3" Style="text-align: center;">Getting student records</MudText>
    }
    else
    {
        <div class="search" style="display: flex; justify-content: space-between;">
            <div>
                <MudTextField Style="max-width: 40ch;" @bind-Value="@SearchName" Placeholder="Student's name" Label="Name" />
                <MudTextField Style="max-width: 40ch;" @bind-Value="@SearchClass" Placeholder="Class's code" Label="Class" />
            </div>
            <div style="display: flex; align-items: center;">
                <MudIconButton @onclick="DisplayStudents">
                    <MudIcon Style="width: 2.5ch; height: 2.5ch; color: #594AE2" Icon="@Icons.Material.Filled.Search" />
                </MudIconButton>
            </div>
        </div>
        <hr />
        <ul style="margin-top: 3ch;">
            <Virtualize Items="StudentsToDisplay" Context="student">
                <li>
                    <StudentItem student="student" OnDeleteClick="async () => { await DeleteStudentAsync(student); }" />
                </li>
                <hr />
            </Virtualize>
        </ul>
    }
</MudContainer>


@code {
    private SortedSet<Student> MyStudents;
    private SortedSet<Student> StudentsToDisplay;
    private bool loading = true;
    private string SearchName;
    private string SearchClass;

    protected override async Task OnInitializedAsync()
    {
        var task = Task.Factory.StartNew(() =>
        {
            MyStudents = classesService.GetAllStudents().Students;
            loading = false;
        });
        await task;
        StudentsToDisplay = MyStudents;
    }

    private async Task DeleteStudentAsync(Student student)
    {
        StudentsToDisplay.Remove(student);
        MyStudents.Remove(student);
        var res = await classesService.DeleteStudent(student.Id);
        if (res.success)
        {
            Snackbar.Add("Successfully deleted student", Severity.Success);
            return;
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
            return;
        }
    }

    private void DisplayStudents()
    {
        if (string.IsNullOrWhiteSpace(SearchName) && string.IsNullOrWhiteSpace(SearchClass))
        {
            StudentsToDisplay = MyStudents;
            return;
        }
        StudentsToDisplay = new();
        if (!string.IsNullOrWhiteSpace(SearchClass) && !string.IsNullOrWhiteSpace(SearchName))
        {
            SearchName = SearchName.Trim().ToUpper();
            SearchClass = SearchClass.Trim().ToUpper();
            foreach (var student in MyStudents)
            {
                if (student.Name.ToUpper() == SearchName && student.Classes.Contains(new() { Code = SearchClass }))
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
        if (!string.IsNullOrWhiteSpace(SearchClass))
        {
            SearchClass = SearchClass.Trim().ToUpper();
            foreach (var student in MyStudents)
            {
                if (student.Classes.Contains(new() { Code = SearchClass }))
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
        if (!string.IsNullOrWhiteSpace(SearchName))
        {
            SearchName = SearchName.Trim().ToUpper();
            foreach (var student in MyStudents)
            {
                if (student.Name.ToUpper() == SearchName)
                {
                    StudentsToDisplay.Add(student);
                }
            }
            return;
        }
    }

}
