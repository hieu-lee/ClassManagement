@page "/ViewScore"
@inject ClassesService classesService
@inject ISnackbar Snackbar
@inject GradesService gradesService
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h3" Style="text-align:center;">My Grades</MudText>
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        <MudText Typo="Typo.h3" Style="text-align: center;">Getting all your grades</MudText>
    }
    else
    {
        <div style="display: flex; justify-content: space-between; margin-top: 3ch;">
            <div>
                <div>
                    <MudTextField @bind-Value="ClassCode" Label="Class Code" Placeholder="Code"
                                  Variant="Variant.Text" Style="max-width:400px; min-width:300px;"></MudTextField>
                </div>
                <div style="margin-top: 1ch;">
                    <MudTextField @bind-Value="StudentName" Label="Student Name" Placeholder="Name"
                                  Variant="Variant.Text" Style="max-width:400px; min-width:300px;"></MudTextField>
                </div>
            </div>
            <div style="display:flex; align-items: center">
                <div>
                    <div>
                        <MudTooltip Text="Search">
                            <MudIconButton @onclick="DisplayScores" Icon="@Icons.Material.Filled.Search" Style="color: #594AE2" />
                        </MudTooltip>
                    </div>
                    <div style="margin-top: 1ch;">
                        <MudTooltip Text="@Mode">
                            <MudIconButton Icon="@EditIcon" Style="color: #594AE2" @onclick="() => { MultiSelect = !MultiSelect; }" />
                        </MudTooltip>
                    </div>
                </div>
            </div>
        </div>
        @*<br />
        <div style="display:flex; justify-content:center;">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="() => { MultiSelect = !MultiSelect; }">@Mode</MudButton>
        </div>*@
        <MudCard Style="margin-top: 3ch;">
            <MudTable Items="@grades" Hover="true" Striped="true" MultiSelection="@MultiSelect" @bind-SelectedItems="selectedGrades">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Grades Table</MudText>
                    <MudToolBarSpacer />
                    <MudButton OnClick="DeleteManyGradesAsync" Variant="Variant.Outlined" Color="Color.Secondary" Style="@($"color: red; border: 1px solid red; display: {deleteManyDisplay}")">Delete Grades</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Student Name</MudTh>
                    <MudTh>Grade in number</MudTh>
                    <MudTh>Relevance</MudTh>
                    <MudTh>Class Code</MudTh>
                    <MudTh>Exam Name</MudTh>
                    <MudTh>Exam Time</MudTh>
                    @*<MudTh>Grade Id</MudTh>*@
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Student Name">@context.StdName</MudTd>
                    <MudTd DataLabel="Grade in number">@context.GradeinNum</MudTd>
                    <MudTd DataLabel="Relevance">@context.RelativeValue</MudTd>
                    <MudTd DataLabel="Class Code">@context.ClassCode</MudTd>
                    <MudTd DataLabel="Exam Name">@context.ExamName</MudTd>
                    <MudTh DataLabel="Exam Time">@context.ExamTime</MudTh>
                    @*<MudTd DataLabel="Grade Id">@context.Id</MudTd>*@
                    <MudIconButton OnClick="@(async () => { await DeleteGradeAsync(context); })"
                                   Icon="@Icons.Material.Filled.Delete">Delete grade</MudIconButton>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                </PagerContent>
            </MudTable>
        </MudCard>
    }
    <div style="display:flex; justify-content:center; margin-top: 3ch;">
        <MudButton @onclick="CalculateAverage" Variant="Variant.Outlined" Color="Color.Primary"
                   Style="@($"margin: auto; display: {isClassNull};")">Calculate average of class: @ClassCode</MudButton>
    </div>
</MudContainer>




@code {
    private string ClassCode;
    private string StudentName;
    private List<string> StudentNames;
    private List<string> ClassCodes;
    private bool MultiSelect = false;
    private SortedSet<Grade> grades;
    private HashSet<Grade> selectedGrades;

    private string Mode => MultiSelect ? "Cancel" : "Edit";
    private string deleteManyDisplay => MultiSelect ? "inline" : "none";
    private string EditIcon => MultiSelect ? Icons.Material.Filled.EditOff : Icons.Material.Filled.Edit;
    private bool loading = true;
    private string isClassNull => string.IsNullOrWhiteSpace(ClassCode) ? "none" : "inline";

    private void DisplayScores()
    {
        ServiceResult svrs = gradesService.GetGradesFromStudentAndClass(StudentName, ClassCode);
        grades = svrs.Grades;
    }
    private void CalculateAverage()
    {
        NavManager.NavigateTo("/AverageScores");

    }
    private async Task DeleteManyGradesAsync()
    {
        await gradesService.DeleteManyGradesAsync(selectedGrades);
        foreach (var s in selectedGrades)
        {
            grades.Remove(s);
        }
    }
    private async Task DeleteGradeAsync(Grade grade)
    {
        var res = await gradesService.DeleteGrade(grade.Id);
        if (res.success)
        {
            Snackbar.Add("Successfully deleted grade", Severity.Success);
            grades.Remove(grade);
            StateHasChanged();
            return;
        }
        else
        {
            Snackbar.Add(res.err, Severity.Error);
            return;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        if (grades is null)
        {
            ServiceResult svrs = gradesService.GetGradesFromStudentAndClass(StudentName, ClassCode);
            grades = svrs.Grades;
        }

        if (StudentNames is null)
            StudentNames = await gradesService.GetAllStudentNames();

        if (ClassCodes is null)
            ClassCodes = await classesService.GetAllClassCodes();

        loading = false;
    }
}
